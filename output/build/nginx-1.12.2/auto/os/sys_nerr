
# Copyright (C) Samuel Martin <s.martin49@gmail.com>


echo $ngx_n "checking for sys_nerr value...$ngx_c"

# sys_nerr guessing is done using a (very) poor (but working)
# heuristics, by checking for the value of ERR_MAX if defined, or
# EHWPOISON otherwise.

cat << END >> $NGX_AUTOCONF_ERR

----------------------------------------
checking for sys_nerr value

END

ngx_sys_nerr=

cat << _EOF > $NGX_AUTOTEST.c

#include <stdio.h>
#include <errno.h>

static char sys_nerr_test[ERR_MAX];
int main(void)
{
    return 0;
}

_EOF

if $CC $CC_TEST_FLAGS $CC_AUX_FLAGS \
        $NGX_AUTOTEST.c -o $NGX_AUTOTEST \
        $NGX_LD_OPT $ngx_feature_libs >/dev/null 2>&1 ; then
    _ngx_max_err_macro=ERR_MAX
else
    # the +2 has been empirically found!
    _ngx_max_err_macro="EHWPOISON + 2"
fi

cat << _EOF > $NGX_AUTOTEST.c

#include <stdio.h>
#include <errno.h>

static char sys_nerr_test[(TEST_ERR_MAX == $_ngx_max_err_macro) ? 1 : -1];
int main(void)
{
    return 0;
}

_EOF


ngx_sys_nerr=`for i in $(seq 0 2000) ; do \
    $CC $CC_TEST_FLAGS $CC_AUX_FLAGS \
    -DTEST_ERR_MAX="$i" \
    $NGX_AUTOTEST.c -o $NGX_AUTOTEST \
    $NGX_LD_OPT $ngx_feature_libs >/dev/null 2>&1 || continue ;\
    echo $i ; break ; done`

rm -rf $NGX_AUTOTEST*

if test -z $ngx_sys_nerr ; then
    ngx_size=0
    ngx_sys_nerr=0
fi

cat << END >> $NGX_AUTO_CONFIG_H

#ifndef $ngx_feature_name
#define $ngx_feature_name $ngx_sys_nerr
#endif

END

echo " $ngx_sys_nerr"
